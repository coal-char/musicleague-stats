<!DOCTYPE html>
<html>

<head>
  <title>View Data</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <link rel="stylesheet" href="./css/stylesheet.css">
</head>

<body>
  <navbar id="names" class="nav">
    <% for (const player of data){ %>
    <h3><a class="playerlink" href="#<%= player.uriName %>"><%= player.name %></a></h3>
    <% } %>
  </navbar>
  <% for (const player of data){ %>
  <div class="playerdiv" id=<%= player.uriName %>>
    <h2><%= player.name %></h2>
    <div class="chartsdiv">
      <canvas id='chartReceived<%= player.uriName %>'></canvas>
      <canvas id='chartGiven<%= player.uriName %>'></canvas>
    </div>
  </div>
  <hr>
  <% } %>
  <script>
    // Define an async function to fetch player data
    async function fetchPlayerData() {
      try {
        // Use fetch API to get data from the '/data' endpoint
        const response = await fetch('/data');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        // Parse the JSON response
        const players = await response.json();

        // Now you can use the 'players' variable here to work with the fetched data
        players.forEach((player) => {
          const ctx = document.getElementById("chartReceived" + player.uriName);
          //get highest number of votes received and given, set to the highest of the two
          let maxVotes = Math.max(Math.max(...player.receiveddata), Math.max(...player.givendata));
          new Chart(ctx, {
            type: "bar",
            data: {
              labels: player.receivedlabels,
              datasets: [{
                label: "Votes Received",
                data: player.receiveddata,
                backgroundColor: player.backgroundColors,
              }],
            },
            options: {
              plugins: {
                title: {
                  display: true,
                  text: "Votes Received"
                },
                legend: {
                  display: false
                }
              },
              scales: {
                y: {
                  beginAtZero: true,
                  max: maxVotes
                }
              }
            }

          });

          const ctx2 = document.getElementById("chartGiven" + player.uriName);
          new Chart(ctx2, {
            type: "bar",
            data: {
              labels: player.givenlabels,
              datasets: [{
                label: "Votes Given",
                data: player.givendata,
                backgroundColor: player.backgroundColors,
              }],
            },
            options: {
              plugins: {
                title: {
                  display: true,
                  text: "Votes Given"
                },
                legend: {
                  display: false
                }
              },
              scales: {
                y: {
                  beginAtZero: true,
                  max: maxVotes
                }
              }
            }
          });
        });
      } catch (error) {
        console.error('Failed to fetch player data:', error);
      }
    }

    // Call the function to fetch player data
    fetchPlayerData();
  </script>
</body>

</html>